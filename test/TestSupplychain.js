// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function (accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Certified Fair Trade Avocado"
    const productPrice = web3.utils.toWei('1', "ether")

    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    const STATE_HARVESTED = 0;
    const STATE_PROCESSED = 1;
    const STATE_PACKED = 2;
    const STATE_FORSALE = 3;
    const STATE_SOLD = 4;
    const STATE_SHIPPED = 5;
    const STATE_RECEIVED = 6;
    const STATE_PURCHASED = 7;

    const EVENT_HARVESTED = 'Harvested';
    const EVENT_PROCESSED = 'Processed';
    const EVENT_PACKED = 'Packed';
    const EVENT_FORSALE = 'ForSale';
    const EVENT_SOLD = 'Sold';
    const EVENT_SHIPPED = 'Shipped';
    const EVENT_RECEIVED = 'Received';
    const EVENT_PURCHASED = 'Purchased';

    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])    
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest avocados", async () => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addFarmer(originFarmerID, { from: ownerID });

        // Mark an item as Harvested by calling function harvestItem()
        let result = await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[5], STATE_HARVESTED, 'Error: Invalid item State')
        assert.equal(result.logs[0].event, EVENT_HARVESTED, 'Invalid event emitted')
    })

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process avocados", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as Processed by calling function processtItem()
        let result = await supplyChain.processItem(upc)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], STATE_PROCESSED, 'Error: Invalid item State')
        assert.equal(result.logs[0].event, EVENT_PROCESSED, 'Invalid event emitted')

    })

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack avocados", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as Packed by calling function packItem()
        let result = await supplyChain.packItem(upc)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], STATE_PACKED, 'Error: Invalid item State')
        assert.equal(result.logs[0].event, EVENT_PACKED, 'Invalid event emitted')
    })

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell avocados", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as ForSale by calling function sellItem()
        let result = await supplyChain.sellItem(upc, productPrice)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice')
        assert.equal(resultBufferTwo[5], STATE_FORSALE, 'Error: Invalid item State')
        assert.equal(result.logs[0].event, EVENT_FORSALE, 'Invalid event emitted')

    })

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy avocados", async () => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addDistributor(distributorID, { from: ownerID });

        console.log('---');
        console.log('is distributor: ', await supplyChain.isDistributor(distributorID));
        console.log('---');

        // Mark an item as Sold by calling function buyItem()
        let result = await supplyChain.buyItem(upc, { from: distributorID, value: productPrice })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        console.log('LOG');
        console.log(resultBufferOne[2], distributorID, originFarmerID)

        // Verify the result set
        assert.equal(resultBufferTwo[5], STATE_SOLD, 'Error: Invalid item State')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(result.logs[0].event, EVENT_SOLD, 'Invalid event emitted')
    })

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship avocados", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as Sold by calling function shipItem()
        let result = await supplyChain.shipItem(upc)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], STATE_SHIPPED, 'Error: Invalid item State')
        assert.equal(result.logs[0].event, EVENT_SHIPPED, 'Invalid event emitted')
    })

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark avocados received", async () => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addRetailer(retailerID, { from: ownerID });

        // Mark an item as Sold by calling function receiveItem()
        let result = await supplyChain.receiveItem(upc, { from: retailerID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], STATE_RECEIVED, 'Error: Invalid item State')
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID')
        assert.equal(result.logs[0].event, EVENT_RECEIVED, 'Invalid event emitted')
    })

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase avocados", async () => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addConsumer(consumerID, { from: ownerID });

        // Mark an item as Sold by calling function purchaseItem()
        let result = await supplyChain.purchaseItem(upc, { from: consumerID, value: productPrice })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], STATE_PURCHASED, 'Error: Invalid item State')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID')
        assert.equal(result.logs[0].event, EVENT_PURCHASED, 'Invalid event emitted')
    })

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)

        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice')
        assert.equal(resultBufferTwo[5], STATE_PURCHASED, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID')
    })

});

